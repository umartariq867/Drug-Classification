# -*- coding: utf-8 -*-
"""umar Mid Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kbn8sFM8A_DOEY6OL54ZflBU1Mas6oy_
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv('/content/drug200.csv')
data

data.describe()

data.dtypes

data1 = data.Sex.value_counts()
print(data1)
data2 = data.BP.value_counts()
print(data2)

data.replace("drugX", "DrugX", inplace = True)
data.replace("drugA", "DrugA", inplace = True)
data.replace("drugC", "DrugC", inplace = True)
data.replace("drugB", "DrugB", inplace = True)
data

data.isnull().sum()

ax = sns.barplot(data1.index, data1.values, alpha = 0.8)
ax.set_xticklabels(ax.get_xticklabels(), ha ='right')
plt.title('Type of Sex')
plt.xlabel('Sex')
plt.ylabel('Total Type of Sex')

ax = sns.barplot(data2.index, data2.values, alpha = 0.8)
ax.set_xticklabels(ax.get_xticklabels(), ha ='right')
plt.title('Blood Preassure')
plt.xlabel('Blood Preassure')
plt.ylabel('Total of Blood Preassure')

ax = sns.barplot(data4.index, data4.values, alpha = 0.8)
ax.set_xticklabels(ax.get_xticklabels(), ha ='right')
plt.title('Type of Drug')
plt.xlabel('Drug')
plt.ylabel('Total of Drug')

ax = sns.boxplot(data=data, orient="h", palette="Set2")
plt.title('Box Plot for each Variable')

n = 0 
for x in ["Age", "Na_to_K"]:
    n = 1
    plt.subplot(2 , 2 , n)
    plt.subplots_adjust(hspace =0.5, wspace = 0.5)
    sns.distplot(data[x] , kde=True, bins = 20)
    plt.title(x)
    plt.show()

ax = sns.set(style="ticks", color_codes='pallete')
ax = sns.pairplot(data, hue="Drug")

Name= ['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K']

X = data[Name]
Y = data['Drug']

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state=0)

X_train = pd.get_dummies(X_train,columns=Name,drop_first=True)
X_test = pd.get_dummies(X_test,columns=Name,drop_first=True)

from sklearn.svm import SVC

svm = SVC()
svm.fit(X_train, Y_train)
print('Accuracy of SVM classifier on this training is {:.2f}'
     .format(svm.score(X_train, Y_train)))

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder as le
from sklearn.metrics import accuracy_score as acc
from sklearn.tree import DecisionTreeClassifier as dtree
from sklearn.metrics import plot_confusion_matrix as plt_conf
from sklearn.model_selection import train_test_split as trn
import matplotlib.pyplot as plt

df = pd.read_csv("./drug200.csv")
df.head(10)

sex_le = le()
bp_le = le()
chol_le = le()

sex_labels = sex_le.fit_transform(df.Sex)
bp_labels = bp_le.fit_transform(df.BP)
chol_labels = chol_le.fit_transform(df.Cholesterol)

print(sex_labels[0:10])
print(bp_labels[0:10])
print(chol_labels[0:10])

df = df.drop("Sex", axis="columns")
df = df.drop("BP", axis="columns")
df = df.drop("Cholesterol", axis="columns")

df['sex'] = sex_labels
df['bp'] = bp_labels
df['chol'] = chol_labels
df.head(10)

df.info()

x = np.array(df[["Age","Na_to_K","sex","bp","chol"]], ndmin=2)
y = np.array(df[["Drug"]])

train_x, test_x, train_y, test_y = trn(x, y, test_size = 0.3, random_state = 3)

tree = dtree(criterion="entropy", max_depth=4)
tree.fit(train_x, train_y)

print("Accuracy score : %.4f" %acc(test_y, tree.predict(test_x)))

plt_conf(tree, test_x, test_y)
plt.show()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier as kNN
from sklearn.metrics import accuracy_score as acc
from sklearn.metrics import plot_confusion_matrix as plt_conf
from sklearn.model_selection import train_test_split as trn
from sklearn.preprocessing import LabelEncoder
import os

df = pd.read_csv("/content/drug200.csv")

df.head(10)

df["Drug"].value_counts()

sex_encode = LabelEncoder()
sex_labels = sex_encode.fit_transform(df.Sex)
sex_labels

bp_encode = LabelEncoder()
bp_labels = bp_encode.fit_transform(df.BP)
bp_labels

chol_encode = LabelEncoder()
chol_labels = chol_encode.fit_transform(df.Cholesterol)
chol_labels

df = df.drop("Sex", axis = "columns")
df = df.drop("Cholesterol", axis = "columns")
df = df.drop("BP", axis = "columns")

df["chol"] = chol_labels
df["bp"] = bp_labels
df["sex"] = sex_labels
df.head(10)

x = np.array(df[["Age", "Na_to_K", "chol", "bp", "sex"]], ndmin=2)
y = np.array(df[["Drug"]])
y = y.reshape(len(y))
y.shape

train_x, test_x, train_y, test_y = trn(x, y, test_size=0.2, random_state=5)

np.unique(test_y, return_counts = True)

ks = 10
acc_array = []

for i in range(1,ks):
    model = kNN(n_neighbors = i)
    model.fit(train_x, train_y)
    predicted = model.predict(test_x)
    score = acc(test_y, predicted)
    acc_array.append(score)

acc_array = np.array(acc_array)
acc_array

plt.plot(range(1,ks), acc_array, linewidth = 3)
plt.xlabel("Number of neighbors")
plt.xlabel("Accuracy")
plt.show()

ideal = acc_array.argmax() + 1
print("The highest accuracy of", acc_array.max(),"was with", ideal, "neighbors")

plt_conf(model, test_x, test_y)
plt.show()